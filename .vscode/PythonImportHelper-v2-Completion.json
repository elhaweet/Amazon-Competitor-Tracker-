[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "API_TOKEN",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "LLM_MODEL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PRICE_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PRODUCT_NAME_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DISCOUNT_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "RATING_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "NUM_OF_RATINGS",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "LLM_MODEL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "API_TOKEN",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PRICE_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PRODUCT_NAME_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DISCOUNT_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "NUM_OF_BOUGHT_IN_30_DAYS_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "RATING_SELECTOR",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "NUM_OF_RATINGS",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "mongodb_handler",
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "isExtraImport": true,
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "mongodb_handler",
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "isExtraImport": true,
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "mongodb_handler",
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "isExtraImport": true,
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "ServerApi",
        "importPath": "pymongo.server_api",
        "description": "pymongo.server_api",
        "isExtraImport": true,
        "detail": "pymongo.server_api",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "CSV_FILENAME",
        "importPath": "src.data_storage",
        "description": "src.data_storage",
        "isExtraImport": true,
        "detail": "src.data_storage",
        "documentation": {}
    },
    {
        "label": "save_price_to_mongodb",
        "importPath": "src.data_storage",
        "description": "src.data_storage",
        "isExtraImport": true,
        "detail": "src.data_storage",
        "documentation": {}
    },
    {
        "label": "CSV_FILENAME",
        "importPath": "src.data_storage",
        "description": "src.data_storage",
        "isExtraImport": true,
        "detail": "src.data_storage",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "AsyncWebCrawler",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "LLMExtractionStrategy",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CrawlerRunConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CacheMode",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "AsyncWebCrawler",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CacheMode",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CrawlerRunConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "LLMExtractionStrategy",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "get_browser_config",
        "importPath": "src.scraper",
        "description": "src.scraper",
        "isExtraImport": true,
        "detail": "src.scraper",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "is_duplicated",
        "importPath": "src.utils",
        "description": "src.utils",
        "isExtraImport": true,
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "extract_product_price",
        "importPath": "src.price_extractor",
        "description": "src.price_extractor",
        "isExtraImport": true,
        "detail": "src.price_extractor",
        "documentation": {}
    },
    {
        "label": "check_price_change",
        "importPath": "src.price_analyzer",
        "description": "src.price_analyzer",
        "isExtraImport": true,
        "detail": "src.price_analyzer",
        "documentation": {}
    },
    {
        "label": "save_price_to_csv",
        "kind": 2,
        "importPath": "src.data_storage",
        "description": "src.data_storage",
        "peekOfCode": "def save_price_to_csv(price_value, price_string, product_name, discount, rating, num_ratings, timestamp):\n    \"\"\"\n    Save the price data to a CSV file.\n    Args:\n        price_value (float): Numeric price value for calculations\n        price_string (str): Original price string with currency\n        product_name (str): Name of the product\n        discount (str): Discount percentage if available\n        rating (str): Product rating\n        num_ratings (str): Number of ratings",
        "detail": "src.data_storage",
        "documentation": {}
    },
    {
        "label": "save_price_to_mongodb",
        "kind": 2,
        "importPath": "src.data_storage",
        "description": "src.data_storage",
        "peekOfCode": "def save_price_to_mongodb(price_value, price_string, product_name, discount, rating, num_ratings, timestamp):\n    \"\"\"\n    Save the price data to MongoDB and CSV.\n    Args:\n        price_value (float): Numeric price value for calculations\n        price_string (str): Original price string with currency\n        product_name (str): Name of the product\n        discount (str): Discount percentage if available\n        rating (str): Product rating\n        num_ratings (str): Number of ratings",
        "detail": "src.data_storage",
        "documentation": {}
    },
    {
        "label": "save_price_to_csv",
        "kind": 2,
        "importPath": "src.data_storage",
        "description": "src.data_storage",
        "peekOfCode": "def save_price_to_csv(price_value, price_string, product_name, discount, bought_30_days=None, rating=None, num_ratings=None, timestamp=None):\n    \"\"\"\n    Save the price data to a CSV file.\n    Args:\n        price_value (float): Numeric price value for calculations\n        price_string (str): Original price string with currency\n        product_name (str): Name of the product\n        discount (str): Discount percentage if available\n        bought_30_days (str, optional): Number of items bought in last 30 days\n        rating (float, optional): Product rating",
        "detail": "src.data_storage",
        "documentation": {}
    },
    {
        "label": "CSV_FILENAME",
        "kind": 5,
        "importPath": "src.data_storage",
        "description": "src.data_storage",
        "peekOfCode": "CSV_FILENAME = \"competitor_history.csv\"\ndef save_price_to_csv(price_value, price_string, product_name, discount, rating, num_ratings, timestamp):\n    \"\"\"\n    Save the price data to a CSV file.\n    Args:\n        price_value (float): Numeric price value for calculations\n        price_string (str): Original price string with currency\n        product_name (str): Name of the product\n        discount (str): Discount percentage if available\n        rating (str): Product rating",
        "detail": "src.data_storage",
        "documentation": {}
    },
    {
        "label": "MongoDBHandler",
        "kind": 6,
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "peekOfCode": "class MongoDBHandler:\n    \"\"\"Handler for MongoDB operations\"\"\"\n    def __init__(self):\n        self.client = None\n        self.db = None\n        self.collection = None\n        self.is_connected = False\n    def connect(self):\n        \"\"\"Establish connection to MongoDB\"\"\"\n        try:",
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "save_price_to_mongodb",
        "kind": 2,
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "peekOfCode": "def save_price_to_mongodb(price_value, price_string, product_name, discount, bought_30_days, rating, num_ratings, timestamp):\n    \"\"\"\n    Save the price data to MongoDB.\n    \"\"\"\n    price_data = {\n        'timestamp': timestamp,\n        'product_name': product_name,\n        'price': price_string,\n        'price_numeric': price_value,\n        'discount': discount,",
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "MONGODB_URI",
        "kind": 5,
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "peekOfCode": "MONGODB_URI = os.getenv('MONGODB_URI')\nDB_NAME = \"price_tracker_db\"\nCOLLECTION_NAME = \"price_history\"\nclass MongoDBHandler:\n    \"\"\"Handler for MongoDB operations\"\"\"\n    def __init__(self):\n        self.client = None\n        self.db = None\n        self.collection = None\n        self.is_connected = False",
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "peekOfCode": "DB_NAME = \"price_tracker_db\"\nCOLLECTION_NAME = \"price_history\"\nclass MongoDBHandler:\n    \"\"\"Handler for MongoDB operations\"\"\"\n    def __init__(self):\n        self.client = None\n        self.db = None\n        self.collection = None\n        self.is_connected = False\n    def connect(self):",
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "COLLECTION_NAME",
        "kind": 5,
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "peekOfCode": "COLLECTION_NAME = \"price_history\"\nclass MongoDBHandler:\n    \"\"\"Handler for MongoDB operations\"\"\"\n    def __init__(self):\n        self.client = None\n        self.db = None\n        self.collection = None\n        self.is_connected = False\n    def connect(self):\n        \"\"\"Establish connection to MongoDB\"\"\"",
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "mongodb_handler",
        "kind": 5,
        "importPath": "src.mongodb_handler",
        "description": "src.mongodb_handler",
        "peekOfCode": "mongodb_handler = MongoDBHandler()\ndef save_price_to_mongodb(price_value, price_string, product_name, discount, bought_30_days, rating, num_ratings, timestamp):\n    \"\"\"\n    Save the price data to MongoDB.\n    \"\"\"\n    price_data = {\n        'timestamp': timestamp,\n        'product_name': product_name,\n        'price': price_string,\n        'price_numeric': price_value,",
        "detail": "src.mongodb_handler",
        "documentation": {}
    },
    {
        "label": "check_price_change",
        "kind": 2,
        "importPath": "src.price_analyzer",
        "description": "src.price_analyzer",
        "peekOfCode": "def check_price_change(current_price):\n    \"\"\"\n    Check if there's a significant price change compared to the last recorded price.\n    Args:\n        current_price (float): The current price value\n    Returns:\n        tuple: (bool, float) - Whether there's a significant change and the percentage change\n    \"\"\"\n    if current_price is None:\n        return False, 0",
        "detail": "src.price_analyzer",
        "documentation": {}
    },
    {
        "label": "PRICE_CHANGE_THRESHOLD",
        "kind": 5,
        "importPath": "src.price_analyzer",
        "description": "src.price_analyzer",
        "peekOfCode": "PRICE_CHANGE_THRESHOLD = 0.01  # 1% threshold for price change notifications\ndef check_price_change(current_price):\n    \"\"\"\n    Check if there's a significant price change compared to the last recorded price.\n    Args:\n        current_price (float): The current price value\n    Returns:\n        tuple: (bool, float) - Whether there's a significant change and the percentage change\n    \"\"\"\n    if current_price is None:",
        "detail": "src.price_analyzer",
        "documentation": {}
    },
    {
        "label": "get_browser_config",
        "kind": 2,
        "importPath": "src.scraper",
        "description": "src.scraper",
        "peekOfCode": "def get_browser_config() -> BrowserConfig:\n    \"\"\"\n    Returns the browser configuration for the crawler.\n    Returns:\n        BrowserConfig: The configuration settings for the browser.\n    \"\"\"\n    # https://docs.crawl4ai.com/core/browser-crawler-config/\n    return BrowserConfig(\n        browser_type=\"chromium\",  # Type of browser that we gonna simulate\n        headless=True,  # Set to True for server deployment",
        "detail": "src.scraper",
        "documentation": {}
    },
    {
        "label": "get_llm_strategy",
        "kind": 2,
        "importPath": "src.scraper",
        "description": "src.scraper",
        "peekOfCode": "def get_llm_strategy(llm_instructions: str, output_format: BaseModel) -> LLMExtractionStrategy:\n    \"\"\"\n    Returns the configuration for the language model extraction strategy.\n    Returns:\n        LLMExtractionStrategy: The settings for how to extract data using LLM.\n    \"\"\"\n    # https://docs.crawl4ai.com/api/strategies/#llmextractionstrategy\n    return LLMExtractionStrategy(\n        llm_config=LLMConfig(provider=LLM_MODEL, api_token=API_TOKEN),  # Updated configuration\n        schema=output_format.model_json_schema(),  # JSON schema of the data model Pydantic JSON schema for structured output.",
        "detail": "src.scraper",
        "documentation": {}
    },
    {
        "label": "is_duplicated",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def is_duplicated(record: str, seen_names: set) -> bool:\n    return record in seen_names\ndef save_data_to_csv(records: list, data_struct: BaseModel, filename: str):\n    if not records:\n        print(\"No records to save.\")\n        return\n    # Use field names from the Pydantic data model\n    fieldnames = data_struct.model_fields.keys()\n    with open(filename, mode=\"w\", newline=\"\", encoding=\"utf-8\") as file:\n        writer = csv.DictWriter(file, fieldnames=fieldnames)",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "save_data_to_csv",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def save_data_to_csv(records: list, data_struct: BaseModel, filename: str):\n    if not records:\n        print(\"No records to save.\")\n        return\n    # Use field names from the Pydantic data model\n    fieldnames = data_struct.model_fields.keys()\n    with open(filename, mode=\"w\", newline=\"\", encoding=\"utf-8\") as file:\n        writer = csv.DictWriter(file, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(records)",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "TRACKING_INTERVAL",
        "kind": 5,
        "importPath": "competitor_tracker",
        "description": "competitor_tracker",
        "peekOfCode": "TRACKING_INTERVAL = 10  # seconds\n# Initialize MongoDB connection\nmongodb_handler.connect()\nasync def track_price(single_run=False):\n    \"\"\"\n    Main function to track the price of a product over time.\n    Args:\n        single_run (bool): If True, run once and return the result instead of looping\n    Returns:\n        dict: The extracted data if single_run is True, otherwise None",
        "detail": "competitor_tracker",
        "documentation": {}
    },
    {
        "label": "LLM_MODEL",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "LLM_MODEL = \"gemini/gemini-2.0-flash\"\nAPI_TOKEN = os.getenv(\"GEMINI_API_KEY\")\n# Base URL of the website to scrape.\n# This URL is for Lenovo laptops on Amazon Egypt.\n# You can modify the URL to change the product category or search query.\n# The {page_number} placeholder will be replaced with the actual page number during crawling.\nBASE_URL = \"https://www.amazon.com/Lenovo-V15-Business-Display-Numeric/dp/B0D3JLHQ8K/ref=sr_1_4?crid=PJSLU1RHELZZ&dib=eyJ2IjoiMSJ9.g6y9YwJTWMx-PRpmNCGgzF3Gbh8-aRtwpdYAE2WNc6hrS_jiyxBOASsRgOriQJPcWaUaXJquWauP8eY2lZJRAQtjT_ItsjnDJxFpUi2R4WKnvvkvcP-0-i9cGkqcJSo_e3X3FpZgBt9uZ1oQk-9xcSsDHGcT67uIt919pw1zf9RaRrsf6ea5oYPyHety8smZY8FVDy_RupckPWiHEnLI1dtGfGJBhLwv8RcacRPE8gs.0Bh0BThrqKSWnHEaOHqGceDUGDQoGzLvugQrt0-vwRs&dib_tag=se&keywords=laptop%2Blenovo&qid=1742796037&sprefix=%2Caps%2C186&sr=8-4&th=1\"\n# CSS selector to target the main HTML element containing the product information.\n# CSS selector specifically for the price element on Amazon product pages\n## Very Specific CSS Selector for the price element on Amazon product pages",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "API_TOKEN",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "API_TOKEN = os.getenv(\"GEMINI_API_KEY\")\n# Base URL of the website to scrape.\n# This URL is for Lenovo laptops on Amazon Egypt.\n# You can modify the URL to change the product category or search query.\n# The {page_number} placeholder will be replaced with the actual page number during crawling.\nBASE_URL = \"https://www.amazon.com/Lenovo-V15-Business-Display-Numeric/dp/B0D3JLHQ8K/ref=sr_1_4?crid=PJSLU1RHELZZ&dib=eyJ2IjoiMSJ9.g6y9YwJTWMx-PRpmNCGgzF3Gbh8-aRtwpdYAE2WNc6hrS_jiyxBOASsRgOriQJPcWaUaXJquWauP8eY2lZJRAQtjT_ItsjnDJxFpUi2R4WKnvvkvcP-0-i9cGkqcJSo_e3X3FpZgBt9uZ1oQk-9xcSsDHGcT67uIt919pw1zf9RaRrsf6ea5oYPyHety8smZY8FVDy_RupckPWiHEnLI1dtGfGJBhLwv8RcacRPE8gs.0Bh0BThrqKSWnHEaOHqGceDUGDQoGzLvugQrt0-vwRs&dib_tag=se&keywords=laptop%2Blenovo&qid=1742796037&sprefix=%2Caps%2C186&sr=8-4&th=1\"\n# CSS selector to target the main HTML element containing the product information.\n# CSS selector specifically for the price element on Amazon product pages\n## Very Specific CSS Selector for the price element on Amazon product pages\n# PRICE_SELECTOR = \"#corePriceDisplay_desktop_feature_div > div.a-section.a-spacing-none.aok-align-center.aok-relative > span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay > span:nth-child(2) > span.a-price-whole\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "BASE_URL = \"https://www.amazon.com/Lenovo-V15-Business-Display-Numeric/dp/B0D3JLHQ8K/ref=sr_1_4?crid=PJSLU1RHELZZ&dib=eyJ2IjoiMSJ9.g6y9YwJTWMx-PRpmNCGgzF3Gbh8-aRtwpdYAE2WNc6hrS_jiyxBOASsRgOriQJPcWaUaXJquWauP8eY2lZJRAQtjT_ItsjnDJxFpUi2R4WKnvvkvcP-0-i9cGkqcJSo_e3X3FpZgBt9uZ1oQk-9xcSsDHGcT67uIt919pw1zf9RaRrsf6ea5oYPyHety8smZY8FVDy_RupckPWiHEnLI1dtGfGJBhLwv8RcacRPE8gs.0Bh0BThrqKSWnHEaOHqGceDUGDQoGzLvugQrt0-vwRs&dib_tag=se&keywords=laptop%2Blenovo&qid=1742796037&sprefix=%2Caps%2C186&sr=8-4&th=1\"\n# CSS selector to target the main HTML element containing the product information.\n# CSS selector specifically for the price element on Amazon product pages\n## Very Specific CSS Selector for the price element on Amazon product pages\n# PRICE_SELECTOR = \"#corePriceDisplay_desktop_feature_div > div.a-section.a-spacing-none.aok-align-center.aok-relative > span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay > span:nth-child(2) > span.a-price-whole\"\n## Less Specific CSS Selector for the price element on Amazon product pages\nPRICE_SELECTOR = \"span.a-price-whole\"\n# CSS selector for the product name on Amazon product pages\nPRODUCT_NAME_SELECTOR = \"span.a-size-large.product-title-word-break\"\n# CSS selector for the discount element on Amazon product pages",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PRICE_SELECTOR",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "PRICE_SELECTOR = \"span.a-price-whole\"\n# CSS selector for the product name on Amazon product pages\nPRODUCT_NAME_SELECTOR = \"span.a-size-large.product-title-word-break\"\n# CSS selector for the discount element on Amazon product pages\nDISCOUNT_SELECTOR = \"span.a-size-large.a-color-price.savingPriceOverride.aok-align-center.reinventPriceSavingsPercentageMargin.savingsPercentage\"\nNUM_OF_BOUGHT_IN_30_DAYS_SELECTOR = \"span.a-text-bold\"\nRATING_SELECTOR = \"#acrPopover > span.a-declarative > a > span\"\nNUM_OF_RATINGS =\"#acrCustomerReviewText\"\n# Maximum number of pages to crawl. Adjust this value based on how much data you want to scrape.\nMAX_PAGES = 3  # Example: Set to 5 to scrape 5 pages.",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PRODUCT_NAME_SELECTOR",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "PRODUCT_NAME_SELECTOR = \"span.a-size-large.product-title-word-break\"\n# CSS selector for the discount element on Amazon product pages\nDISCOUNT_SELECTOR = \"span.a-size-large.a-color-price.savingPriceOverride.aok-align-center.reinventPriceSavingsPercentageMargin.savingsPercentage\"\nNUM_OF_BOUGHT_IN_30_DAYS_SELECTOR = \"span.a-text-bold\"\nRATING_SELECTOR = \"#acrPopover > span.a-declarative > a > span\"\nNUM_OF_RATINGS =\"#acrCustomerReviewText\"\n# Maximum number of pages to crawl. Adjust this value based on how much data you want to scrape.\nMAX_PAGES = 3  # Example: Set to 5 to scrape 5 pages.\n# Instructions for the LLM on what information to extract from the scraped content.\n# The LLM will extract the following details for each product:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DISCOUNT_SELECTOR",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "DISCOUNT_SELECTOR = \"span.a-size-large.a-color-price.savingPriceOverride.aok-align-center.reinventPriceSavingsPercentageMargin.savingsPercentage\"\nNUM_OF_BOUGHT_IN_30_DAYS_SELECTOR = \"span.a-text-bold\"\nRATING_SELECTOR = \"#acrPopover > span.a-declarative > a > span\"\nNUM_OF_RATINGS =\"#acrCustomerReviewText\"\n# Maximum number of pages to crawl. Adjust this value based on how much data you want to scrape.\nMAX_PAGES = 3  # Example: Set to 5 to scrape 5 pages.\n# Instructions for the LLM on what information to extract from the scraped content.\n# The LLM will extract the following details for each product:\n# - Name\n# - Price",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "NUM_OF_BOUGHT_IN_30_DAYS_SELECTOR",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "NUM_OF_BOUGHT_IN_30_DAYS_SELECTOR = \"span.a-text-bold\"\nRATING_SELECTOR = \"#acrPopover > span.a-declarative > a > span\"\nNUM_OF_RATINGS =\"#acrCustomerReviewText\"\n# Maximum number of pages to crawl. Adjust this value based on how much data you want to scrape.\nMAX_PAGES = 3  # Example: Set to 5 to scrape 5 pages.\n# Instructions for the LLM on what information to extract from the scraped content.\n# The LLM will extract the following details for each product:\n# - Name\n# - Price\n# - Rating",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "RATING_SELECTOR",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "RATING_SELECTOR = \"#acrPopover > span.a-declarative > a > span\"\nNUM_OF_RATINGS =\"#acrCustomerReviewText\"\n# Maximum number of pages to crawl. Adjust this value based on how much data you want to scrape.\nMAX_PAGES = 3  # Example: Set to 5 to scrape 5 pages.\n# Instructions for the LLM on what information to extract from the scraped content.\n# The LLM will extract the following details for each product:\n# - Name\n# - Price\n# - Rating\n# - Reviews count",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MAX_PAGES",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "MAX_PAGES = 3  # Example: Set to 5 to scrape 5 pages.\n# Instructions for the LLM on what information to extract from the scraped content.\n# The LLM will extract the following details for each product:\n# - Name\n# - Price\n# - Rating\n# - Reviews count\n# - Availability\n# - Description\n# - URL",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SCRAPER_INSTRUCTIONS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SCRAPER_INSTRUCTIONS = (\n    \"Extract the following information for each Amazon product in the search results: \"\n    \"'name' (product title), 'price' (current price with currency), 'rating' (star rating), \"\n    \"'reviews_count' (number of reviews), 'availability' (in stock or not), \"\n    \"'description' (brief summary of key features), and 'url' (product page link). \"\n    \"If any information is not available, indicate with 'Not available'.\"\n)",
        "detail": "config",
        "documentation": {}
    }
]